@startuml
class SpriteShapeGenerator <<struct>> {
    m_IndexDataCount : int
    m_VertexDataCount : int
    m_ColliderDataCount : int
    m_ActiveIndexCount : int
    m_ActiveVertexCount : int
    kModeLinear : int
    kModeContinous : int
    kModeBroken : int
    kCornerTypeOuterTopLeft : int
    kCornerTypeOuterTopRight : int
    kCornerTypeOuterBottomLeft : int
    kCornerTypeOuterBottomRight : int
    kCornerTypeInnerTopLeft : int
    kCornerTypeInnerTopRight : int
    kCornerTypeInnerBottomLeft : int
    kCornerTypeInnerBottomRight : int
    kControlPointCount : int
    kEpsilon : float
    kEpsilonOrder : float
    kEpsilonRelaxed : float
    kExtendSegment : float
    kRenderQuality : float
    kOptimizeRender : float
    kColliderQuality : float
    kOptimizeCollider : float
    kLowestQualityTolerance : float
    kHighestQualityTolerance : float
    GetSpriteInfo(index:int) : JobSpriteInfo
    GetCornerSpriteInfo(index:int) : JobSpriteInfo
    GetAngleRange(index:int) : JobAngleRange
    GetControlPoint(index:int) : JobControlPoint
    GetContourPoint(index:int) : JobContourPoint
    GetSegmentInfo(index:int) : JobSegmentInfo
    GetContourIndex(index:int) : int
    GetEndContourIndexOfSegment(isi:JobSegmentInfo) : int
    {static} CopyToNativeArray(from:NativeArray<T>, length:int, to:NativeArray<T>) : void
    {static} SafeDispose(na:NativeArray<T>) : void
    {static} IsPointOnLine(epsilon:float, a:float2, b:float2, c:float2) : bool
    {static} IsPointOnLines(epsilon:float, p1:float2, p2:float2, p3:float2, p4:float2, r:float2) : bool
    {static} LineIntersection(epsilon:float, p1:float2, p2:float2, p3:float2, p4:float2, result:float2) : bool
    {static} AngleBetweenVector(a:float2, b:float2) : float
    {static} GenerateColumnsBi(a:float2, b:float2, whsize:float2, flip:bool, rt:float2, rb:float2, cph:float) : bool
    {static} GenerateColumnsTri(a:float2, b:float2, c:float2, whsize:float2, flip:bool, rt:float2, rb:float2, cph:float) : bool
    AppendCornerCoordinates(corners:NativeArray<float2>, cornerCount:int, a:float2, b:float2, c:float2, d:float2) : void
    <<unsafe>> PrepareInput(shapeParams:SpriteShapeParameters, maxArrayCount:int, shapePoints:NativeArray<ShapeControlPoint>, optimizeGeometry:bool, updateCollider:bool, optimizeCollider:bool, colliderPivot:float, colliderDetail:float) : void
    TransferSprites(spriteInfos:NativeArray<JobSpriteInfo>, sprites:Sprite[], maxCount:int) : void
    PrepareSprites(edgeSprites:Sprite[], cornerSprites:Sprite[]) : void
    PrepareAngleRanges(angleRanges:AngleRangeInfo[]) : void
    PrepareControlPoints(shapePoints:NativeArray<ShapeControlPoint>, metaData:NativeArray<SpriteShapeMetaData>) : void
    WithinRange(angleRange:JobAngleRange, inputAngle:float) : bool
    AngleWithinRange(t:float, a:float, b:float) : bool
    {static} BezierPoint(st:float2, sp:float2, ep:float2, et:float2, t:float) : float2
    {static} SlopeAngle(dirNormalized:float2) : float
    {static} SlopeAngle(start:float2, end:float2) : float
    ResolveAngle(angle:float, activeIndex:int, renderOrder:float, spriteIndex:int, firstSpriteIndex:int) : bool
    GetSpriteIndex(index:int, previousIndex:int, resolved:int) : int
    GenerateSegments() : void
    GenerateControlPoints() : bool
    SegmentDistance(isi:JobSegmentInfo) : float
    GenerateContour() : void
    TessellateContour() : void
    CalculateBoundingBox() : void
    CalculateTexCoords() : void
    CopyVertexData(outPos:NativeSlice<Vector3>, outUV0:NativeSlice<Vector2>, outTan:NativeSlice<Vector4>, outIndex:int, inVertices:NativeArray<JobShapeVertex>, inIndex:int, pivot:float, sOrder:float) : void
    CopySegmentRenderData(ispr:JobSpriteInfo, outPos:NativeSlice<Vector3>, outUV0:NativeSlice<Vector2>, outTan:NativeSlice<Vector4>, outCount:int, indexData:NativeArray<ushort>, indexCount:int, inVertices:NativeArray<JobShapeVertex>, inCount:int, sOrder:float) : int
    TessellateSegment(sprInfo:JobSpriteInfo, segment:JobSegmentInfo, whsize:float2, border:float4, pxlWidth:float, useClosure:bool, validHead:bool, validTail:bool, vertices:NativeArray<JobShapeVertex>, vertexCount:int, outputVertices:NativeArray<JobShapeVertex>, outputCount:int) : void
    SkipSegment(isi:JobSegmentInfo) : bool
    TessellateSegments() : void
    AttachCorner(cp:int, ct:int, ispr:JobSpriteInfo, newPoints:NativeArray<JobControlPoint>, activePoint:int) : bool
    CornerTextureCoordinate(cornerType:int, index:int) : float2
    CalculateCorner(index:int, angle:float, lt:float2, rt:float2) : int
    InsertCorner(index:int, cpSpriteIndices:NativeArray<int2>, newPoints:NativeArray<JobControlPoint>, activePoint:int) : bool
    TessellateCorners() : void
    AreCollinear(a:float2, b:float2, c:float2, t:float) : bool
    OptimizePoints(tolerance:float, pointSet:NativeArray<float2>, pointCount:int) : void
    AttachCornerToCollider(isi:JobSegmentInfo, pivot:float, colliderPoints:NativeArray<float2>, colliderPointCount:int) : void
    UpdateCollider(isi:JobSegmentInfo, ispr:JobSpriteInfo, vertices:NativeArray<JobShapeVertex>, count:int, colliderPoints:NativeArray<float2>, colliderPointCount:int) : float2
    TrimOverlaps() : void
    OptimizeCollider() : void
    + Prepare(controller:UnityEngine.U2D.SpriteShapeController, shapeParams:SpriteShapeParameters, maxArrayCount:int, shapePoints:NativeArray<ShapeControlPoint>, metaData:NativeArray<SpriteShapeMetaData>, angleRanges:AngleRangeInfo[], segmentSprites:Sprite[], cornerSprites:Sprite[]) : void
    + Execute() : void
    + Cleanup() : void
}
class JobParameters <<struct>> {
}
class JobSpriteInfo <<struct>> {
}
class JobAngleRange <<struct>> {
}
class JobControlPoint <<struct>> {
}
class JobContourPoint <<struct>> {
}
class JobSegmentInfo <<struct>> {
}
class JobCornerInfo <<struct>> {
}
class JobShapeVertex <<struct>> {
}
class "NativeArray`1"<T> {
}
class "NativeSlice`1"<T> {
}
IJob <|-- SpriteShapeGenerator
SpriteShapeGenerator --> "m_VertexData<JobShapeVertex>" "NativeArray`1"
SpriteShapeGenerator --> "m_OutputVertexData<JobShapeVertex>" "NativeArray`1"
SpriteShapeGenerator --> "m_IndexArray<ushort>" "NativeArray`1"
SpriteShapeGenerator --> "m_PosArray<Vector3>" "NativeSlice`1"
SpriteShapeGenerator --> "m_Uv0Array<Vector2>" "NativeSlice`1"
SpriteShapeGenerator --> "m_TanArray<Vector4>" "NativeSlice`1"
SpriteShapeGenerator --> "m_GeomArray<SpriteShapeSegment>" "NativeArray`1"
SpriteShapeGenerator --> "m_ColliderPoints<float2>" "NativeArray`1"
SpriteShapeGenerator --> "m_Bounds<Bounds>" "NativeArray`1"
SpriteShapeGenerator --> "m_FirstLT" float2
SpriteShapeGenerator --> "m_FirstLB" float2
SpriteShapeGenerator --> "m_Transform" float4x4
SpriteShapeGenerator +-- JobParameters
JobParameters --> "shapeData" int4
JobParameters --> "splineData" int4
JobParameters --> "curveData" float4
JobParameters --> "fillData" float4
SpriteShapeGenerator +-- JobSpriteInfo
JobSpriteInfo --> "texRect" float4
JobSpriteInfo --> "texData" float4
JobSpriteInfo --> "uvInfo" float4
JobSpriteInfo --> "metaInfo" float4
JobSpriteInfo --> "border" float4
SpriteShapeGenerator +-- JobAngleRange
JobAngleRange --> "spriteAngles" float4
JobAngleRange --> "spriteVariant1" int4
JobAngleRange --> "spriteVariant2" int4
JobAngleRange --> "spriteData" int4
SpriteShapeGenerator +-- JobControlPoint
JobControlPoint --> "cpData" int4
JobControlPoint --> "exData" int4
JobControlPoint --> "cpInfo" float4
JobControlPoint --> "position" float2
JobControlPoint --> "tangentLt" float2
JobControlPoint --> "tangentRt" float2
SpriteShapeGenerator +-- JobContourPoint
JobContourPoint --> "position" float2
JobContourPoint --> "ptData" float2
SpriteShapeGenerator +-- JobSegmentInfo
JobSegmentInfo --> "spInfo" int4
JobSegmentInfo --> "spriteInfo" float4
SpriteShapeGenerator +-- JobCornerInfo
JobCornerInfo --> "bottom" float2
JobCornerInfo --> "top" float2
JobCornerInfo --> "left" float2
JobCornerInfo --> "right" float2
JobCornerInfo --> "cornerData" int2
SpriteShapeGenerator +-- JobShapeVertex
JobShapeVertex --> "pos" float2
JobShapeVertex --> "uv" float2
JobShapeVertex --> "tan" float4
JobShapeVertex --> "meta" float2
JobShapeVertex --> "sprite" int2
@enduml
